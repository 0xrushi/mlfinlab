"""
This module creates clustered subsets of features described in the paper Clustered Feature Importance (Presentation
Slides) by Dr. Marcos Lopez de Prado. https://papers.ssrn.com/sol3/papers.cfm?abstract_id=3517595 and is also explained
in the book Machine Learning for Asset Managers Snippet 6.5.2 page 84.
"""

#Imports
import pandas as pd
import statsmodels.api as sm
from scipy.spatial.distance import squareform
from scipy.cluster.hierarchy import linkage, fcluster
from statsmodels.regression.linear_model import OLS

from mlfinlab.clustering.onc import get_onc_clusters
from mlfinlab.codependence.codependence_matrix import get_dependence_matrix, get_distance_matrix


# pylint: disable=invalid-name
def get_feature_clusters(X: pd.DataFrame, dependence_metric: str, distance_metric: str, linkage_method: str,
                         n_clusters: int = None):
    """
    Machine Learning for Asset Managers
    Snippet 6.5.2.1 , page 85. Step 1: Features Clustering

    Get clustered features subsets from the given set of features.

    :param X: (pd.DataFrame) of features.
    :param dependence_metric: (str) method to be use for generating dependence_matrix, either 'linear' or
       'information_variation' or 'mutual_information' or 'distance_correlation'.
    :param distance_metric: (str) the distance operator to be used for generating the distance matrix. The methods that
       can be applied are: 'angular', 'squared_angular', 'absolute_angular'.
    :param linkage_method: (str) method of linkage to be used for clustering. Methods include: 'single' , 'ward' ,
       'complete' , 'average' , 'weighted' and 'centroid'.
    :param n_clusters: (int) number of clusters to form. Must be less the total number of features. If None then it
       returns optimal number of clusters decided by the ONC Algorithm.
    :return: (array) of feature subsets.
    """
    # Checking if dataset contains features low silhouette
    X = _check_for_low_silhouette_scores(X, critical_threshold)
    # Get the dependence matrix
    if dependence_metric != 'linear':
        dep_matrix = get_dependence_matrix(X, dependence_method=dependence_metric)
    else:
        dep_matrix = X.corr()

    # Apply distance operator on the dependence matrix
    dist_matrix = get_distance_matrix(dep_matrix, distance_metric=distance_metric)
    link = linkage(squareform(dist_matrix), method=linkage_method)

    if n_clusters is None:
        clustered_subsets = list(get_onc_clusters(dep_matrix.fillna(0))[1].values())  # Get optimal number of clusters
        return clustered_subsets
    if n_clusters >= len(X.columns):  # Check if number of clusters exceeds number of features
        raise ValueError('Number of clusters must be less than the number of features')

    clusters = fcluster(link, t=n_clusters, criterion='maxclust')
    clustered_subsets = [[f for c, f in zip(clusters, X.columns) if c == ci] for ci in range(1, n_clusters + 1)]

    return clustered_subsets

def _cluster_transformation(X: pd.DataFrame, clusters: dict, feats_to_transform: list):
    '''
    Machine Learning for Asset Managers
    Snippet 6.5.2.1 , page 85. Step 1: Features Clustering (last paragraph)

    Transforms a dataset to reduce the multicollinearity of the system by replacing
    the original feature with the residual from regression.

    :param X: (pd.DataFrame) of features.
    :param clusters: (dict) of clusters generated by ONC algorithm.
    :param feats_to_transform: (list) of features that have low silhouette score and to be transformed.
    :return: (pd.DataFrame) of transformed features.
    '''
    for feat in feats_to_transform:
        for i,j in clusters.items():
            if feat in j:
                exog = X.drop(j,axis=1)
                endog = X[feat]
                ols = OLS(endog,sm.add_constant(exog)).fit()
                X[feat] = ols.resid
    return X

def _check_for_low_silhouette_scores(X: pd.DataFrame, critical_threshold: int = 0):
    '''
    Machine Learning for Asset Managers
    Snippet 6.5.2.1 , page 85. Step 1: Features Clustering (last paragraph)

    A function that checks where the dataset contains features low silhouette due one feature being a combination of
    multiple features across clusters. This is a problem, because ONC cannot assign one feature to multiple
    clusters and it needs a transformation.

    :param X: (pd.DataFrame) of features.
    :param critical_threshold: (int) threshold for determining low silhouette score
    :return: (pd.DataFrame) of features.
    '''
    corr,clstrs,silh = get_onc_clusters(X.corr())
    low_silh_feat = silh[silh < critical_threshold].index
    if len(low_silh_feat) == 0:
        print('There is no feature/s found with low silhouette score. All features belongs to its respective clusters')
        return X
    else:
        print(f'{len(low_silh_feat)} feature/s found with low silhouette score {low_silh_feat}. Returning the transformed dataset')
        #getting the transformed dataset
        X = cluster_transformation(X,clstrs,low_silh_feat)
        return X
